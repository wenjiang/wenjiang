package com.zhengwenbiao;

import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.imageio.ImageIO;

public class pratice {
	private static List<Integer> mDifferenceList = new ArrayList<Integer>();
	private static List<String> mColorList = new ArrayList<String>();
	private static List<String> mRedPitchList = new ArrayList<String>();
	private static List<String> mRedBrickList = new ArrayList<String>();
	private static List<String> mBlackPitchList = new ArrayList<String>();
	private static List<String> mPlumList = new ArrayList<String>();
	private static FileWriter mWriterBrick = null;
	private static FileWriter mWriterBlackPitch = null;
	private static FileWriter mWriterRedPitch = null;
	private static FileWriter mWriterPlum = null;
	private static FileReader mReaderBrick = null;
	private static FileReader mReaderBlackPitch = null;
	private static FileReader mReaderRedPitch = null;
	private static FileReader mReaderPlum = null;
	private static BufferedWriter mBufferWriterBrick = null;
	private static BufferedWriter mBufferWriterBlackPitch = null;
	private static BufferedWriter mBufferWriterRedPitch = null;
	private static BufferedWriter mBufferWriterPlum = null;
	private static BufferedReader mReader = null;
	private static boolean mIsBrick = false;
	private static boolean mIsRedPitch = false;
	private static boolean mIsBlackPitch = false;
	private static boolean mIsPlum = false;
	private static String mSourceHashCode = null;

	public static void main(String[] args) throws IOException,
			InterruptedException {
		initValue();
		getCutImage();
		Thread.sleep(2000);
		createSrcImage();
		Thread.sleep(2000);
		createSrcHashCode();
		addSample();
		judgeAndAnswer();
	}

	private static void getCutImage() throws IOException {
		ImageUtil util = new ImageUtil();
		util.cutImage(440, 755, 0, 0, 440, 755, "source");
	}

	private static void initValue() throws IOException {
		mRedPitchList.add("3f7f7ffffff3f3ff");
		mRedBrickList.add("0cfcf7fffffbf3fc");
		mBlackPitchList.add("ffcf073787ffffff");
		mPlumList.add("0047fbfffff7f7f7");
		mWriterBrick = new FileWriter("D:\\workspace\\Image\\方砖.txt", true);
		mBufferWriterBrick = new BufferedWriter(mWriterBrick);
		mWriterBlackPitch = new FileWriter("D:\\workspace\\Image\\黑桃.txt", true);
		mBufferWriterBlackPitch = new BufferedWriter(mWriterBlackPitch);
		mWriterRedPitch = new FileWriter("D:\\workspace\\Image\\红桃.txt", true);
		mBufferWriterRedPitch = new BufferedWriter(mWriterRedPitch);
		mWriterPlum = new FileWriter("D:\\workspace\\Image\\梅花.txt", true);
		mBufferWriterPlum = new BufferedWriter(mWriterPlum);
		mReaderBrick = new FileReader("D:\\workspace\\Image\\方砖.txt");
		mReaderBlackPitch = new FileReader("D:\\workspace\\Image\\黑桃.txt");
		mReaderRedPitch = new FileReader("D:\\workspace\\Image\\红桃.txt");
		mReaderPlum = new FileReader("D:\\workspace\\Image\\梅花.txt");
	}

	private static void createSrcHashCode() {
		String filename = ImageHelper.path + "\\新建文件夹\\";
		mSourceHashCode = produceFingerPrint(filename + "source.jpg");
	}

	private static void createSrcImage() throws IOException {
		BufferedImage image = ImageIO.read(new File(
				"D:\\workspace\\Image\\bin\\新建文件夹\\source.jpg"));// 通过imageio将图像载入
		ImageIO.write(image, "jpg", new File(
				"D:\\workspace\\Image\\bin\\新建文件夹\\source.jpg"));
	}

	private static void addSample() {
		List<String> hashCodes = new ArrayList<String>();
		hashCodes.add("3f7f7ffffff3f3ff");
		hashCodes.add("0cfcf7fffffbf3fc");
		hashCodes.add("ffcf073787ffffff");
		hashCodes.add("0047fbfffff7f7f7");
		for (int i = 0, size = hashCodes.size(); i < size; i++) {
			int difference = hammingDistance(mSourceHashCode, hashCodes.get(i));
			mDifferenceList.add(difference);
			mColorList.add(hashCodes.get(i));
		}
	}

	private static void judgeAndAnswer() throws IOException {
		int min = getMinDifference();
		mReader = new BufferedReader(new InputStreamReader((System.in)));
		if (mDifferenceList.get(min) > 7) {
			System.out.println("请再拍一张，这张无法识别");
		} else if ((mDifferenceList.get(min) > 1)
				&& (mDifferenceList.get(min) <= 7)) {
			getMaybeAnswer(min);
		} else if (mDifferenceList.get(min) < 2) {
			getSureAnswer(min);
		}
	}

	private static void getSureAnswer(int min) throws IOException {
		String color = mColorList.get(min);
		if (color.equals("3f7f7ffffff3f3ff")) {
			getAnswer("红桃");
		} else if (color.equals("0cfcf7fffffbf3fc")) {
			getAnswer("方块");
		} else if (color.equals("ffcf073787ffffff")) {
			getAnswer("黑桃");
		} else if (color.equals("0047fbfffff7f7f7")) {
			getAnswer("梅花");
		}
	}

	private static void getAnswer(String color) throws IOException {
		System.out.println("这是一张" + color + "A");
		System.out.println("是吧？");
		answer();
	}

	private static int getMinDifference() {
		int min = 0;
		for (int i = 0, len = mDifferenceList.size() - 1; i < len; i++) {
			if (mDifferenceList.get(min) >= mDifferenceList.get(i + 1)) {
				min = i + 1;
			}
		}
		return min;
	}

	private static void answer() throws IOException {
		String str = mReader.readLine();
		if (str.equals("Y")) {
			System.out.println("太好了!我果然是最聪明的!");
		} else {
			System.out.println("Oh,shit!下次不会错了!!");
			if (str.equals("Brick")) {
				writeToColorTxt(mBufferWriterBrick);
			} else if (str.equals("BlackPitch")) {
				writeToColorTxt(mBufferWriterBlackPitch);
			} else if (str.equals("RedPitch")) {
				writeToColorTxt(mBufferWriterRedPitch);
			} else if (str.equals("Plum")) {
				writeToColorTxt(mBufferWriterPlum);
			}
		}
	}

	private static void writeToColorTxt(BufferedWriter mBufferWriter)
			throws IOException {
		mBufferWriter.write(mSourceHashCode);
		mBufferWriter.newLine();
		mBufferWriter.flush();
	}

	private static void response() throws IOException {
		String str = mReader.readLine();
		if (str.equals("Y")) {
			System.out.println("所以说我早就知道了 !");
		} else {
			if (str.equals("Brick")) {
				writeToColorTxt(mBufferWriterBrick);
			} else if (str.equals("BlackPitch")) {
				writeToColorTxt(mBufferWriterBlackPitch);
			} else if (str.equals("RedPitch")) {
				writeToColorTxt(mBufferWriterRedPitch);
			} else if (str.equals("Plum")) {
				writeToColorTxt(mBufferWriterPlum);
			}
			System.out.println("都说是猜啦!");
		}
	}

	private static void getMaybeAnswer(int min) throws IOException {
		BufferedReader rb = new BufferedReader(mReaderBrick);
		BufferedReader rbp = new BufferedReader(mReaderBlackPitch);
		BufferedReader rrp = new BufferedReader(mReaderRedPitch);
		BufferedReader rp = new BufferedReader(mReaderPlum);
		addTxtToList(rb, mRedBrickList);
		addTxtToList(rbp, mBlackPitchList);
		addTxtToList(rrp, mRedPitchList);
		addTxtToList(rp, mPlumList);
		judgeFromList(mRedBrickList, "Brick");
		judgeFromList(mRedPitchList, "RedPitch");
		judgeFromList(mBlackPitchList, "BlackPitch");
		judgeFromList(mPlumList, "Plum");
		if (mIsRedPitch) {
			getResponse("红桃");
		} else if (mIsBrick) {
			getResponse("方块");
		} else if (mIsBlackPitch) {
			getResponse("黑桃");
		} else if (mIsPlum) {
			getResponse("梅花");
		} else {
			String color = mColorList.get(min);
			if (color.equals("3f7f7ffffff3f3ff")) {
				getResponse("红桃");
			} else if (color.equals("0cfcf7fffffbf3fc")) {
				getResponse("方块");
			} else if (color.equals("ffcf073787ffffff")) {
				getResponse("黑桃");
			} else if (color.equals("0047fbfffff7f7f7")) {
				getResponse("梅花");
			}
		}
	}

	private static void getResponse(String color) throws IOException {
		System.out.println("这可能是一张" + color + "A");
		System.out.println("是吧？");
		response();
	}

	private static void judgeFromList(List<String> list, String name) {
		for (int i = 0, len = list.size(); i < len; i++) {
			if (!(list.get(i).equals("1"))) {
				int difference = hammingDistance(mSourceHashCode, list.get(i));
				if (difference < 2) {
					setBool(name);
				} else {
					System.out.println("让我想想。。。");
				}
			}
		}
	}

	private static void setBool(String name) {
		if (name.equals("Brick")) {
			mIsBrick = true;
		} else if (name.equals("RedPitch")) {
			mIsRedPitch = true;
		} else if (name.equals("BlackPitch")) {
			mIsBlackPitch = true;
		} else if (name.equals("Plum")) {
			mIsPlum = true;
		}
	}

	private static void addTxtToList(BufferedReader reader, List<String> list)
			throws IOException {
		String context = reader.readLine();
		while (context != null) {
			list.add(context);
			context = reader.readLine();
		}
	}

	/**
	 * 计算"汉明距离"（Hamming distance）。 如果不相同的数据位不超过5，就说明两张图片很相似；如果大于10，就说明这是两张不同的图片。
	 * 
	 * @param sourceHashCode
	 *            源hashCode
	 * @param hashCode
	 *            与之比较的hashCode
	 */
	public static int hammingDistance(String sourceHashCode, String hashCode) {
		int difference = 0;
		int len = sourceHashCode.length();
		for (int i = 0; i < len; i++) {
			if (sourceHashCode.charAt(i) != hashCode.charAt(i)) {
				difference++;
			}
		}
		return difference;
	}

	/**
	 * 生成图片指纹
	 * 
	 * @param filename
	 *            文件名
	 * @return 图片指纹
	 */
	public static String produceFingerPrint(String filename) {
		BufferedImage source = ImageHelper.readPNGImage(filename);// 读取文件
		int width = 8;
		int height = 8;
		// 第一步，缩小尺寸。
		// 将图片缩小到8x8的尺寸，总共64个像素。这一步的作用是去除图片的细节，只保留结构、明暗等基本信息，摒弃不同尺寸、比例带来的图片差异。
		BufferedImage thumb = ImageHelper.thumb(source, width, height, false);
		// 第二步，简化色彩。
		// 将缩小后的图片，转为64级灰度。也就是说，所有像素点总共只有64种颜色。
		int[] pixels = new int[width * height];
		for (int i = 0; i < width; i++) {
			for (int j = 0; j < height; j++) {
				pixels[i * height + j] = ImageHelper.rgbToGray(thumb.getRGB(i,
						j));
			}
		}

		// 第三步，计算平均值。
		// 计算所有64个像素的灰度平均值。
		int avgPixel = ImageHelper.average(pixels);

		// 第四步，比较像素的灰度。
		// 将每个像素的灰度，与平均值进行比较。大于或等于平均值，记为1；小于平均值，记为0。
		int[] comps = new int[width * height];
		for (int i = 0; i < comps.length; i++) {
			if (pixels[i] >= avgPixel) {
				comps[i] = 1;
			} else {
				comps[i] = 0;
			}
		}

		// 第五步，计算哈希值。
		// 将上一步的比较结果，组合在一起，就构成了一个64位的整数，这就是这张图片的指纹。组合的次序并不重要，只要保证所有图片都采用同样次序就行了。
		StringBuffer hashCode = new StringBuffer();
		for (int i = 0; i < comps.length; i += 4) {
			int result = comps[i] * (int) Math.pow(2, 3) + comps[i + 1]
					* (int) Math.pow(2, 2) + comps[i + 2]
					* (int) Math.pow(2, 1) + comps[i + 2];
			hashCode.append(binaryToHex(result));
		}
		// 得到指纹以后，就可以对比不同的图片，看看64位中有多少位是不一样的。
		return hashCode.toString();
	}

	/**
	 * 二进制转为十六进制
	 * 
	 * @param int binary
	 * @return char hex
	 */
	private static char binaryToHex(int binary) {
		char ch = ' ';
		switch (binary) {
		case 0:
			ch = '0';
			break;
		case 1:
			ch = '1';
			break;
		case 2:
			ch = '2';
			break;
		case 3:
			ch = '3';
			break;
		case 4:
			ch = '4';
			break;
		case 5:
			ch = '5';
			break;
		case 6:
			ch = '6';
			break;
		case 7:
			ch = '7';
			break;
		case 8:
			ch = '8';
			break;
		case 9:
			ch = '9';
			break;
		case 10:
			ch = 'a';
			break;
		case 11:
			ch = 'b';
			break;
		case 12:
			ch = 'c';
			break;
		case 13:
			ch = 'd';
			break;
		case 14:
			ch = 'e';
			break;
		case 15:
			ch = 'f';
			break;
		default:
			ch = ' ';
		}
		return ch;
	}

}
